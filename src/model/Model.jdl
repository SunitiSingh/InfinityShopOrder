/**
 * The CommerceOrder entity.
 */
entity CommerceOrder {
	status OrderStatus required
	custid String required
	creationDate ZonedDateTime required
	placedDate ZonedDateTime
	updateDate ZonedDateTime
}

entity CommerceOrderPrice {
	name String
	price BigDecimal required
}

relationship OneToMany {
	CommerceOrder{prices} to CommerceOrderPrice
}

relationship OneToMany {
	CommerceOrder{shipcontainers} to CommerceShippingContainer
}

entity CommerceOrderPriceNg {
	price BigDecimal required
	ngid String
}

relationship OneToMany {
	CommerceOrderPrice{ngs} to CommerceOrderPriceNg
}

enum OrderStatus {
	CART, PLACED, SHIPPED, PARTIALLY_SHIPPED, SETTLED, RETURNED, PARTIALLY_RETURNED, CLOSED
}

entity CommerceItem {
	skuid String required
	quantity Integer required
	creationDate ZonedDateTime required
	updateDate ZonedDateTime
}

relationship ManyToMany {
	CommerceItem{shipcontainer(shipstatus)} to CommerceShippingContainer{item}
}

relationship OneToOne {
	CommerceItem{price} to CommerceItemPrice
}

entity CommerceItemPrice {
	price BigDecimal required
}

entity CommerceItemPriceNg {
	price BigDecimal required
	ngid String
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
	CommerceOrder{item} to CommerceItem,
	CommerceItemPrice{ngs} to CommerceItemPriceNg
}

entity CommerceShippingContainer {
	shipstatus CommerceShipStatus required
	carrier String
	creationDate ZonedDateTime required
	updateDate ZonedDateTime
}

entity CommerceItemShipInfo {
	status ItemShipStatus required
	quantity Integer required	
}

entity CommerceItemPayInfo {
	status ItemPayStatus required
	quantity Integer required
}

enum ItemShipStatus {
	INIT, SHIPPED, UNAVAILABLE
}

enum ItemPayStatus {
	INIT, PAID
}

relationship OneToOne {
	CommerceItem{shipInfo} to CommerceItemShipInfo,
	CommerceItemShipInfo{shipContainer} to CommerceShippingContainer
}

relationship OneToOne {
	CommerceItem{payInfo} to CommerceItemPayInfo,
	CommerceItemPayInfo{orderPayment} to CommerceOrderPayment
}

entity CommerceShipContainerPrice {
	price BigDecimal required
}

relationship OneToOne {
	CommerceShippingContainer{price} to CommerceShipContainerPrice
}

relationship OneToMany {
	CommerceShipContainerPrice{ngs} to CommerceShipPriceNg
}

entity CommerceShipPriceNg {
	price BigDecimal required
}

enum CommerceShipStatus {
	INIT, DROPPED, CANT_SHIP, PARTIALLY_SHIPPED, SHIPPED
}

relationship OneToMany {
	CommerceOrder{payments} to CommerceOrderPayment
}

entity CommerceOrderPayment {
	paystatus PayStatus
	paymentAmount BigDecimal
	paymentType CommercePaymentType
	firstName String
	lastName String
	billingPhone String
}

enum PayStatus {
	INITIAL, AUTHORIZED, SETTLED, AUTH_FAILED, SETTLE_FAILED
}

relationship ManyToMany {
	CommerceItem{payment(paystatus)} to CommerceOrderPayment{item}
}

enum CommercePaymentType {
	CARD, EPAY
}

relationship OneToOne {
	CommerceOrderPayment{card} to CommercePaymentCard,
	CommerceOrderPayment{epay} to CommerceEPay,
	CommerceOrderPayment{billingAddress} to CommerceBillingAddress
}

entity CommercePaymentCard {
	cardType String
	cardNumber String
	expMonth Integer
	expYear Integer
	createDate ZonedDateTime
	updateDate ZonedDateTime
}

entity CommerceEPay {
	ePayType String
	ePayToken String
	createDate ZonedDateTime
	updateDate ZonedDateTime
}

entity CommerceBillingAddress {
	address1 String
	address2 String
	city String
	postalcode String
	createDate ZonedDateTime
	updateDate ZonedDateTime
}

// Set pagination options
paginate CommerceOrder, CommerceItem with pagination
//paginate CommerceOrder, CommerceItem with infinite-scroll

dto * with mapstruct

// Set service options to all except few
service all with serviceImpl
// Set an angular suffix
//angularSuffix * with mySuffix
